shiny::runApp()
decision_point<-14
xmin<-10
xmax<-20
mean<-15
sd<-1
decision_point<-input$decision_point
rng<-seq(xmin,xmax,0.05)
null_vals<-dnorm(x=rng,mean=mean,sd=sd)
#null_vals<-dnorm(x=rng,mean=input$onemean,sd=input$onesdev)
nulldf<-data.frame(x=rng,null_vals)
nulldf$type1vals<-nulldf$null_vals
nulldf$type1vals[nulldf$x>decision_point]<-0
type_1_df<-subset(nulldf,x<=decision_point)
nullplot<-ggplot(data=nulldf,aes(x=x))+xlim(xmin,xmax)+
ylab("Density")+xlab("Possible Lengths")+
ggtitle("Null Hypothesis Distribution")+
geom_ribbon(data=nulldf,aes(ymin=0,ymax=null_vals),fill="steelblue")+
geom_vline(x=decision_point)+
geom_ribbon(data=type_1_df, aes(ymin=0,
ymax=type1vals),fill="red")
nullplot
xmin<-10
xmax<-20
mean<-13
sd<-1
decision_point<-input$decision_point
rng<-seq(xmin,xmax,0.05)
null_vals<-dnorm(x=rng,mean=mean,sd=sd)
#null_vals<-dnorm(x=rng,mean=input$onemean,sd=input$onesdev)
nulldf<-data.frame(x=rng,null_vals)
nulldf$type1vals<-nulldf$null_vals
nulldf$type1vals[nulldf$x>decision_point]<-0
type_1_df<-subset(nulldf,x<=decision_point)
altplot<-ggplot(data=nulldf,aes(x=x))+xlim(xmin,xmax)+
ylab("Density")+xlab("Possible Lengths")+
ggtitle("Alternate Hypothesis Distribution")+
geom_ribbon(data=nulldf,aes(ymin=0,ymax=null_vals),fill="red")+
geom_vline(x=decision_point)+
geom_ribbon(data=type_1_df, aes(ymin=0,
ymax=type1vals),fill="steelblue")
altplot
multiplot(nullplot,altplot)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(nullplot,altplot)
shiny::runApp()
shiny::runApp()
shiny::runApp()
pnorm()
?pnorm
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?matrix
type_1<-round(pnorm(input$decision_point,mean=15,sd=1),3)
keepnull<-round(1-pnorm(input$decision_point,mean=15,sd=1),3)
input$decision_point<-13
type_1<-round(pnorm(input$decision_point,mean=15,sd=1),3)
keepnull<-round(1-pnorm(input$decision_point,mean=15,sd=1),3)
power<-round(pnorm(input$decision_point,mean=13,sd=1),3)
type_2<-round(1-pnorm(input$decision_point,mean=13,sd=1),3)
out_matrix<-matrix(c(type_1,keepnull,power,type_2),2,2)
input$decision_point<-13
shiny::runApp()
shiny::runApp()
shinyapps::setAccountInfo(name='dswalter',
token='24F4E34F081B3B119084089D919EB798',
secret='Aih01jigLVnTnOUMwsoahm9PQiW7AXvvpossHOZT')
shinyapps::setAccountInfo(name='dswalter',
token='24F4E34F081B3B119084089D919EB798',
secret='Aih01jigLVnTnOUMwsoahm9PQiW7AXvvpossHOZT')
install.packages("shinyapps")
